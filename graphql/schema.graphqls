"""
Represents an opaque identifier on a resource allowing cursor based pagination.
e.g. `1jS3rqHqNoGdj6nJ2VN3UvJvqnz`
"""
scalar Cursor

"""
Represents a date time in a RFC3339 Nano format.
e.g. `2006-01-02T15:04:05.999999999Z07:00`
"""
scalar Time

"""
Represents an okp4 address as [Bech32](https://en.bitcoin.it/wiki/Bech32) format prefixed by the blockchain prefix.
e.g. `okp41jse8senm9hcvydhl8v9x47kfe5z82zmwtw8jvj`
"""
scalar AccAddress

"""
Represents an okp4 validator address as [Bech32](https://en.bitcoin.it/wiki/Bech32) format prefixed by the blockchain valoper prefix.
e.g. `okp4valoper1jse8senm9hcvydhl8v9x47kfe5z82zmwtw8jvj`
"""
scalar ValoperAddress

"""
Represents a Keybase Key ID.
e.g. `547DBC6F536D3AD2`
"""
scalar KID

"""
Represents an [Uniform Resource Identifier](https://fr.wikipedia.org/wiki/Uniform_Resource_Identifier) to permanently identify a resource.
e.g. `https://okp4.network/`
"""
scalar URI

"""
Represents an 8 bytes unsigned integer.
"""
scalar UInt64

"""
Represents a void return type, carrying no value.
"""
scalar Void

"""
Represents a Javascript Object Notation format.
"""
scalar JSON

"""
Authorization needed to perform operation.
"""
directive @auth on FIELD_DEFINITION

directive @goField(
    forceResolver: Boolean
    name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type Query {
    """
    Fetch a specific Phase.
    """
    phase(
        """
        The requested phase's number.
        """
        number: Int!
    ): Phase

    """
    Fetch multiple phases.
    """
    phases: Phases!

    """
    Retrieve the state of the Nemeton Leaderboard.
    """
    board(
        """
        A text string to filter the validators.
        """
        search: String

        """
        The slice size the connection shall return.
        """
        first: Int = 20

        """
        Specify the elements to return after this cursor.
        """
        after: Cursor
    ): BoardConnection!

    """
    The total number of participants, or druids, or validator.
    """
    validatorCount: Int!

    """
    Fetch a validator through one of its unique property.
    """
    validator(
        cursor: Cursor
        rank: Int
        valoper: ValoperAddress
        delegator: AccAddress
        discord: String
        twitter: String
    ): Validator
}

type Mutation {
    """
    Emit a `GenTXSubmittedEvent` in the system carrying information related to a druid participating to the Nemeton program, this contain the combination of technical validator information & application information.

    Through the event handling logic, the validator will be added to the board and the corresponding task completed with points attribution if still in progress.
    """
    submitValidatorGenTX(
        """
        The validator twitter account.
        """
        twitter: String

        """
        The validator discord account.
        """
        discord: String!

        """
        The validator country.
        """
        country: String!

        """
        The gentx carrying the `MsgCreateValidator` related to this validator.
        """
        gentx: JSON!
    ): Void @auth
}

"""
Represents a Phases payload
"""
type Phases {
    """
    Retrieve all the phases.
    """
    all: [Phase!]! @goField(forceResolver: true)

    """
    Retrieve all the ongoing phases, those who hasn't started yet.
    """
    ongoing: [Phase!]! @goField(forceResolver: true)

    """
    Retrieve all the finished phases.
    """
    finished: [Phase!]! @goField(forceResolver: true)

    """
    Retrieve the current phase.
    """
    current: Phase @goField(forceResolver: true)
}

"""
Represents a Phase of the Nemeton Program
"""
type Phase {
    """
    Identify the phase, the phases are ordered through their number.
    """
    number: Int!

    """
    The name of the phase.
    """
    name: String!

    """
    The description of the phase.
    """
    description: String!

    """
    The date the phase begins.
    """
    startDate: Time!

    """
    The date the phase ends.
    """
    endDate: Time!

    """
    `true` if the phase is in progress.
    """
    started: Boolean!

    """
    `true` if the phase is finished.
    """
    finished: Boolean!

    """
    The tasks composing the phase the druids will have to perform.
    """
    tasks: [Task!]!

    """
    The current block range of the phase. In the case the phase hasn't started its size is 0, for a phase in progress the range will evolve.
    """
    blocks: BlockRange! @goField(forceResolver: true)
}

"""
Represents a phase's task, containing only descriptive elements. It does not expressed any potential progress or result as it is not linked to a druid.
"""
type Task {
    """
    The unique identifier of the task.
    """
    id: ID!

    """
    The name of the task.
    """
    name: String!

    """
    The description of the task.
    """
    description: String!

    """
    The date the task begins.
    """
    startDate: Time!

    """
    The date the task ends.
    """
    endDate: Time!

    """
    `true` if the task is in progress.
    """
    started: Boolean!

    """
    `true` if the task is finished.
    """
    finished: Boolean!

    """
    Tells whether a task require a manual submission from the druids to be evaluated.
    """
    withSubmission: Boolean!

    """
    The points earned if the task is completed. No value means there is no fixed amount of points as rewards, the amount is calculated regarding the performance.
    """
    rewards: UInt64
}

"""
Represents a blockchain block range.
"""
type BlockRange {
    """
    The block height the range begin, inclusive.
    """
    from: Int!

    """
    The block height the range end, inclusive.
    """
    to: Int!

    """
    The size of the range (i.e. `size` =  `to` - `from`).
    """
    count: Int!
}

"""
Represents a page of the Leaderboard.
"""
type BoardConnection {
    """
    The page's validators, ordered by their rank.
    """
    edges: [ValidatorEdge!]!

    """
    The information on the current connection page.
    """
    pageInfo: PageInfo!
}

"""
Represents an edge to a validator.
"""
type ValidatorEdge {
    """
    The validator's cursor.
    """
    cursor: Cursor!

    """
    The validator.
    """
    node: Validator!
}

"""
Contains information on a connection page.
"""
type PageInfo {
    """
    The cursor of the first element of the page.
    """
    startCursor: Cursor

    """
    The cursor of the last element of the page.
    """
    endCursor: Cursor

    """
    `true` if there is other elements after the endCursor.
    """
    hasNextPage: Boolean!

    """
    The number of elements in the page.
    """
    count: Int!
}

"""
Represents a validator, a participant or a druid in the Nemeton program.
"""
type Validator {
    """
    The validator position in the board.
    """
    rank: Int! @goField(forceResolver: true)

    """
    The validator moniker.
    """
    moniker: String!

    """
    The validator identity on https://keybase.io/, can be used to retrieve its picture.
    """
    identity: Identity @goField(forceResolver: true)

    """
    The validator details.
    """
    details: String

    """
    The validator node valoper address.
    """
    valoper: ValoperAddress!

    """
    The address of the validator node delegator.
    """
    delegator: AccAddress!

    """
    The validator twitter account.
    """
    twitter: String

    """
    The validator website.
    """
    website: URI

    """
    The validator discord account.
    """
    discord: String!

    """
    The validator country.
    """
    country: String!

    """
    The validator current status.
    """
    status: ValidatorStatus!

    """
    The validator points count.
    """
    points: UInt64!

    """
    The validator affected tasks, does not reference not tasks who has not started yet.
    """
    tasks: Tasks! @goField(forceResolver: true)

    """
    The blocks the validator has not signed.
    """
    missedBlocks: [BlockRange!]! @goField(forceResolver: true)
}

"""
Represents an identity on https://keybase.io/
"""
type Identity {
    """
    The identity PGP key id.
    """
    kid: KID!

    """
    The resolved identity picture, if any.
    """
    picture: Link @goField(forceResolver: true)
}

"""
A Link represents a relationship from the containing resource to a URI.
"""
type Link {
    """
    The URI to the resource.

    Its value is either a URI compliant with [RFC3986](https://www.ietf.org/rfc/rfc3986.txt) or a URI Template compliant with
    [RFC6570](https://tools.ietf.org/html/rfc6570).

    If the value is a URI Template then the Link Object shall have a `templated` attribute whose value is true.
    """
    href: URI!
}

"""
Represents the status of a validator node on the blockchain.
"""
enum ValidatorStatus {
    ACTIVE
    INACTIVE
    JAILED
}

"""
Contains information relative to the state of the tasks a validator shall perform.
"""
type Tasks {
    """
    The total number of tasks the validator completed.
    """
    completedCount: Int!

    """
    The total number of started tasks the validator is supposed to perform.
    """
    startedCount: Int!

    """
    The total number of finished tasks the validator was supposed to perform.
    """
    finishedCount: Int!

    """
    Details the tasks state a validator is supposed to perform per phase.
    """
    perPhase: [PerPhaseTasks!]!

    """
    Details the tasks state a validator is supposed to perform in the specified phase.
    """
    forPhase(number: Int!): PerPhaseTasks @goField(forceResolver: true)
}

"""
Contains tasks state in the context of a phase and a validator.
"""
type PerPhaseTasks {
    """
    The total number of tasks the validator completed in this phase.
    """
    completedCount: Int!

    """
    The total number of started tasks the validator is supposed to perform.
    """
    startedCount: Int!

    """
    The total number of finished tasks in this phase.
    """
    finishedCount: Int!

    """
    The phase we're talking about.
    """
    phase: Phase!

    """
    The current status of the phase's tasks for a validator.
    """
    tasks: [TaskState!]!
}

"""
Represents the progress/result of a task assigned to a validator.
"""
interface TaskState {
    """
    The task we're talking about.
    """
    task: Task!

    """
    `true` if the validator  completed this task.
    """
    completed: Boolean!

    """
    The number of points earned by the validator on this task.
    """
    earnedPoints: UInt64!
}

"""
Represents the state of a basic task.
"""
type BasicTaskState implements TaskState {
    """
    The task we're talking about.
    """
    task: Task!

    """
    `true` if the validator  completed this task.
    """
    completed: Boolean!

    """
    The number of points earned by the validator on this task.
    """
    earnedPoints: UInt64!
}

"""
Represents the state of a specific task of uptime.
"""
type UptimeTask implements TaskState {
    """
    The task we're talking about.
    """
    task: Task!

    """
    `true` if the validator  completed this task.
    """
    completed: Boolean!

    """
    The number of points earned by the validator on this task.
    """
    earnedPoints: UInt64!

    """
    The total number of blocks expected to be signed.
    """
    blockCount: Int!

    """
    The number of missed blocks.
    """
    missedBlockCount: Int!

    """
    The missed block ranges.
    """
    missedBlocks: [BlockRange!]!

    """
    The ratio of signed blocks.
    """
    ratio: Int!
}

"""
Represents the state of a specific task requiring a manual submission from the validator.
"""
type SubmissionTask implements TaskState {
    """
    The task we're talking about.
    """
    task: Task!

    """
    `true` if the validator  completed this task.
    """
    completed: Boolean!

    """
    The number of points earned by the validator on this task.
    """
    earnedPoints: UInt64!

    """
    `true` if the validator has submitted the content expected for the task.
    """
    submitted: Boolean!
}
