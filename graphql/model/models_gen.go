// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type TaskState interface {
	IsTaskState()
	GetTask() *Task
	GetCompleted() bool
	GetEarnedPoints() int
}

type BlockRange struct {
	From  int `json:"from"`
	To    int `json:"to"`
	Count int `json:"count"`
}

type BoardConnection struct {
	Edges    []*ValidatorEdge `json:"edges"`
	PageInfo *PageInfo        `json:"pageInfo"`
}

type PageInfo struct {
	StartCursor string `json:"startCursor"`
	EndCursor   string `json:"endCursor"`
	HasNextPage bool   `json:"hasNextPage"`
	Count       int    `json:"count"`
}

type PerPhaseTasks struct {
	CompletedCount int         `json:"completedCount"`
	FinishedCount  int         `json:"finishedCount"`
	Phase          *Phase      `json:"phase"`
	Tasks          []TaskState `json:"tasks"`
}

type Phase struct {
	Number      int         `json:"number"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
	StartDate   string      `json:"startDate"`
	EndDate     string      `json:"endDate"`
	Started     bool        `json:"started"`
	Finished    bool        `json:"finished"`
	Tasks       []*Task     `json:"tasks"`
	Blocks      *BlockRange `json:"blocks"`
}

type Phases struct {
	All      []*Phase `json:"all"`
	Ongoing  []*Phase `json:"ongoing"`
	Finished []*Phase `json:"finished"`
	Current  *Phase   `json:"current"`
}

type SubmissionTask struct {
	Task         *Task `json:"task"`
	Completed    bool  `json:"completed"`
	EarnedPoints int   `json:"earnedPoints"`
	Submitted    bool  `json:"submitted"`
}

func (SubmissionTask) IsTaskState()              {}
func (this SubmissionTask) GetTask() *Task       { return this.Task }
func (this SubmissionTask) GetCompleted() bool   { return this.Completed }
func (this SubmissionTask) GetEarnedPoints() int { return this.EarnedPoints }

type Task struct {
	Number         int    `json:"number"`
	Name           string `json:"name"`
	Description    string `json:"description"`
	StartDate      string `json:"startDate"`
	EndDate        string `json:"endDate"`
	Started        bool   `json:"started"`
	Finished       bool   `json:"finished"`
	WithSubmission bool   `json:"withSubmission"`
	Rewards        *int   `json:"rewards"`
}

type Tasks struct {
	CompletedCount int              `json:"completedCount"`
	FinishedCount  int              `json:"finishedCount"`
	PerPhase       []*PerPhaseTasks `json:"perPhase"`
}

type UptimeTask struct {
	Task             *Task `json:"task"`
	Completed        bool  `json:"completed"`
	EarnedPoints     int   `json:"earnedPoints"`
	BlockCount       int   `json:"blockCount"`
	MissedBlockCount int   `json:"missedBlockCount"`
	Rate             int   `json:"rate"`
}

func (UptimeTask) IsTaskState()              {}
func (this UptimeTask) GetTask() *Task       { return this.Task }
func (this UptimeTask) GetCompleted() bool   { return this.Completed }
func (this UptimeTask) GetEarnedPoints() int { return this.EarnedPoints }

type Validator struct {
	Rank         int             `json:"rank"`
	Moniker      string          `json:"moniker"`
	Identity     *string         `json:"identity"`
	Valoper      string          `json:"valoper"`
	Delegator    string          `json:"delegator"`
	Twitter      *string         `json:"twitter"`
	Discord      string          `json:"discord"`
	Country      string          `json:"country"`
	Status       ValidatorStatus `json:"status"`
	Points       int             `json:"points"`
	Tasks        *Tasks          `json:"tasks"`
	MissedBlocks []*BlockRange   `json:"missedBlocks"`
}

type ValidatorEdge struct {
	Cursor string     `json:"cursor"`
	Node   *Validator `json:"node"`
}

type ValidatorStatus string

const (
	ValidatorStatusActive   ValidatorStatus = "ACTIVE"
	ValidatorStatusInactive ValidatorStatus = "INACTIVE"
	ValidatorStatusJailed   ValidatorStatus = "JAILED"
)

var AllValidatorStatus = []ValidatorStatus{
	ValidatorStatusActive,
	ValidatorStatusInactive,
	ValidatorStatusJailed,
}

func (e ValidatorStatus) IsValid() bool {
	switch e {
	case ValidatorStatusActive, ValidatorStatusInactive, ValidatorStatusJailed:
		return true
	}
	return false
}

func (e ValidatorStatus) String() string {
	return string(e)
}

func (e *ValidatorStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ValidatorStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ValidatorStatus", str)
	}
	return nil
}

func (e ValidatorStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
